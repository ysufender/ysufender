-- I'm both amazed and scared of myself right now.

@include io
@include string
@include array

func update begin
    write "[Update Script] Updating updates.md"
    define header as index 0 of os.args

    define updateFile as "updates/"
    append header to updateFile
    set updateFile to do string.replace updateFile " " "_" 
    append ".md" to updateFile

    if not do file.exists updateFile then
        error "Seems like the file doesn't exists. Check the name." updateFile
    end

    define newMainContent as ["## Last Update`n"]
    define updateContents as do file.readAllLines updateFile

    foreach line in updateContents begin
        append line to newMainContent
    end

    append "`n## History`n" to newMainContent

    -- New History Entry
    define tmpArr as [ "- [", header, "](https://github.com/ysufender/ysufender/blob/master/", updateFile, ") - [" ]
    define datetime_t as {System::DateTime}
    define datetime as datetime_t:Now
    define datetimeStr as variable->ClrToVar datetime->ToString "dd/MM/yyyy"
    append datetimeStr to tmpArr 
    append "]" to tmpArr 
    append do string.concat tmpArr to newMainContent

    define oldUpdatesFile as do file.openOrCreate "updates.md" fileAccess.read false
    define oldReader as do file.createReader oldUpdatesFile

    while true begin
        define line as do file.readLine oldReader
        if = line "## History" then
            break
        elif = line "EOF" then
            error "Unexpected EOF in updates.md before History"
        end
    end

    define oldHistory as do file.readLine oldReader

    if = oldHistory string.empty then
        set oldHistory to do file.readLine oldReader
    end

    while != oldHistory "EOF" begin
        append oldHistory to newMainContent
        set oldHistory to do file.readLine oldReader
    end

    define tmpFile as do file.create "tmpMain.md" fileAccess.write
    define tmpWriter as do file.createWriter tmpFile

    foreach line in newMainContent begin
        do file.writeLine tmpWriter line true
    end

    tmpWriter->Close
    oldReader->Close

    do file.rename "tmpMain.md" "updates.md"

    write "[Update Script] Successfully updated updates.md"
    write "[Update Script] Updating README.md"

    define newHistEn as variable->ClrToVar do string.concat tmpArr
    set newHistEn to do string.replace newHistEn datetimeStr ""
    set newHistEn to do string.replace newHistEn "- []" "" 

    define oldReadme as do file.openOrCreate "README.md" fileAccess.read false
    define readmeReader as do file.createReader oldReadme
    define readme as do file.create "tmpReadme.md" fileAccess.write
    define readmeWriter as do file.createWriter readme

    while true begin
        define line as do file.readLine readmeReader

        if = line "Most Recent:  " then
            do file.writeLine readmeWriter "Most Recent:  " true
            do file.writeLine readmeWriter newHistEn true
            set line to do file.readLine readmeReader
            set line to do file.readLine readmeReader
        elif = line "EOF" then
            break
        end

        do file.writeLine readmeWriter line true
    end

    readmeWriter->Close
    readmeReader->Close

    do file.rename "tmpReadme.md" "README.md"

    write "[Update Script] Successfully updated README.md"
end

func help begin
    write "Usage:"
    write "`tupdate help: print this message"
    write "`tupdate list: lists all updates under `updates` directory"
    write "`tupdate recent: prints the most recent update"
    write "`tupdate <name>: updates with given update, name should be in quotes (`q) and must be the same as 'update recent' prints"
    write "`n`t(That's a lot of updates)"
    write "`n`t(Note that 'update' here is 'update.sscript' itself, not an argument)"
end

func list begin
    write "All Entries:"
    define allEntries as do directory.getFiles "updates/"
    foreach entry in allEntries begin
        set entry to do string.replace entry "updates/" ""
        set entry to do string.replace entry "_" " "
        set entry to do string.replace entry ".md" ""
        write "`t" entry 
    end
end

func recent begin
    define fileinfo_t as {System::IO::FileInfo}
    define datetime_t as {System::DateTime}
    
    define dir as do directory.openOrCreate "updates/"
    define files as dir->GetFiles

    define recentWrite as datetime_t:MinValue
    define mostRecent as null

    foreach info in files begin
        define wTime as info:LastWriteTime
        define isGreat as variable->ClrToVar wTime->CompareTo recentWrite

        if <= 0 isGreat then
            set recentWrite to wTime
            set mostRecent to info
        end
    end

    define str as variable->ClrToVar mostRecent:Name
    set str to do string.replace str "updates/" ""
    set str to do string.replace str "_" " "
    set str to do string.replace str ".md" ""
    write "Most Recent Update:`n`t" str  
end

-- Handle CLI
define cmd as "help" 
if != os.argc 0 then
    set cmd to index 0 of os.args
end

if = "help" cmd then
    do help
elif = "list" cmd then
    do list
elif = "recent" cmd then
    do recent
elif > os.argc 1 then
    error "Just the update name is enough. No need for more" "Honestly"
else
    do update
end
